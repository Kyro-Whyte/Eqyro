/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InvestmentOption as PrismaInvestmentOption,
  Payment as PrismaPayment,
} from "@prisma/client";

export class InvestmentOptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvestmentOptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.investmentOption.count(args);
  }

  async investmentOptions(
    args: Prisma.InvestmentOptionFindManyArgs
  ): Promise<PrismaInvestmentOption[]> {
    return this.prisma.investmentOption.findMany(args);
  }
  async investmentOption(
    args: Prisma.InvestmentOptionFindUniqueArgs
  ): Promise<PrismaInvestmentOption | null> {
    return this.prisma.investmentOption.findUnique(args);
  }
  async createInvestmentOption(
    args: Prisma.InvestmentOptionCreateArgs
  ): Promise<PrismaInvestmentOption> {
    return this.prisma.investmentOption.create(args);
  }
  async updateInvestmentOption(
    args: Prisma.InvestmentOptionUpdateArgs
  ): Promise<PrismaInvestmentOption> {
    return this.prisma.investmentOption.update(args);
  }
  async deleteInvestmentOption(
    args: Prisma.InvestmentOptionDeleteArgs
  ): Promise<PrismaInvestmentOption> {
    return this.prisma.investmentOption.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.investmentOption
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
