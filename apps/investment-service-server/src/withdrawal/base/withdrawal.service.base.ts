/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Withdrawal as PrismaWithdrawal,
  User as PrismaUser,
} from "@prisma/client";

export class WithdrawalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WithdrawalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.withdrawal.count(args);
  }

  async withdrawals(
    args: Prisma.WithdrawalFindManyArgs
  ): Promise<PrismaWithdrawal[]> {
    return this.prisma.withdrawal.findMany(args);
  }
  async withdrawal(
    args: Prisma.WithdrawalFindUniqueArgs
  ): Promise<PrismaWithdrawal | null> {
    return this.prisma.withdrawal.findUnique(args);
  }
  async createWithdrawal(
    args: Prisma.WithdrawalCreateArgs
  ): Promise<PrismaWithdrawal> {
    return this.prisma.withdrawal.create(args);
  }
  async updateWithdrawal(
    args: Prisma.WithdrawalUpdateArgs
  ): Promise<PrismaWithdrawal> {
    return this.prisma.withdrawal.update(args);
  }
  async deleteWithdrawal(
    args: Prisma.WithdrawalDeleteArgs
  ): Promise<PrismaWithdrawal> {
    return this.prisma.withdrawal.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.withdrawal
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
