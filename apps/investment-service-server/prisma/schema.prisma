datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Payment {
  createdAt          DateTime          @default(now())
  id                 String            @id @default(cuid())
  investmentOption   InvestmentOption? @relation(fields: [investmentOptionId], references: [id])
  investmentOptionId String?
  paymentDate        DateTime?
  updatedAt          DateTime          @updatedAt
  user               User?             @relation(fields: [userId], references: [id])
  userId             String?
}

model InvestmentOption {
  amount    Int?
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  payments  Payment[]
  updatedAt DateTime  @updatedAt
}

model Referral {
  createdAt      DateTime  @default(now())
  id             String    @id @default(cuid())
  referralDate   DateTime?
  referredUserId String?
  updatedAt      DateTime  @updatedAt
  user           User?     @relation(fields: [userId], references: [id])
  userId         String?
}

model Admin {
  adminName String?
  createdAt DateTime @default(now())
  email     String?
  id        String   @id @default(cuid())
  password  String?
  updatedAt DateTime @updatedAt
}

model User {
  createdAt     DateTime     @default(now())
  deposits      Deposit[]
  email         String?      @unique
  emailUser     String?
  firstName     String?
  firstNameUser String?
  id            String       @id @default(cuid())
  lastName      String?
  lastNameUser  String?
  password      String
  passwordUser  String?
  payments      Payment[]
  referrals     Referral[]
  roles         Json
  updatedAt     DateTime     @updatedAt
  username      String       @unique
  usernameUser  String?
  withdrawals   Withdrawal[]
}

model TransactionHistory {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Notification {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Performance {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Withdrawal {
  amount    Int?
  createdAt DateTime  @default(now())
  date      DateTime?
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Deposit {
  amount    Int?
  createdAt DateTime  @default(now())
  date      DateTime?
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}
